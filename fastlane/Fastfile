# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

before_all do
  ENV['PROFILE'] = "AppSealing Wildcard Distribution Profile"
end

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    require 'net/http'
    require 'uri'
    require 'json'
    require 'jwt'

    # App Store Connect API 인증 정보
    KEY_ID = 'YOUR_KEY_ID' # App Store Connect에서 발급받은 Key ID
    ISSUER_ID = 'YOUR_ISSUER_ID' # App Store Connect에서 발급받은 Issuer ID
    PRIVATE_KEY_PATH = './AuthKey.p8' # 개인 키 파일 경로

    # 프로젝트 루트 경로 가져오기
    project_root = File.expand_path("..", __dir__)
    fastlane_path = File.expand_path(".", __dir__)

    # Xcode 프로젝트(.xcodeproj) 또는 워크스페이스(.xcworkspace) 파일 자동 검색
    xcode_file_path = Dir.glob(File.join(project_root, "*.xcworkspace")).first || Dir.glob(File.join(project_root, "*.xcodeproj")).first
    if xcode_file_path.nil?
      UI.user_error!("[AppSealing] No Xcode project or workspace found in the project root directory: #{project_root}")
    end

    # 프로젝트 이름 및 스킴 자동 추출
    project_name = File.basename(xcode_file_path, File.extname(xcode_file_path))
    scheme_name = ""
    Dir.chdir(File.dirname(xcode_file_path)) do
      scheme_name = sh("xcodebuild -list -#{xcode_file_path.end_with?('.xcworkspace') ? 'workspace' : 'project'} #{File.basename(xcode_file_path)} | grep 'Schemes:' -A 1 | tail -n 1").strip
    end

    if scheme_name.empty?
      UI.user_error!("[AppSealing] Failed to retrieve scheme name from Xcode project or workspace.")
    end

    UI.message "[AppSealing] Project Name: #{project_name}"
    UI.message "[AppSealing] Scheme Name: #{scheme_name}"

    # 번들 ID 동적으로 추출
    bundle_id = ""
    Dir.chdir(File.dirname(xcode_file_path)) do
      bundle_id_command = "xcodebuild -showBuildSettings -scheme #{scheme_name} | grep 'PRODUCT_BUNDLE_IDENTIFIER' | awk -F ' = ' '{print $2}'"
      bundle_id_output = sh(bundle_id_command).lines.map(&:strip).reject { |line| line.include?("WARNING") || line.empty? }
      bundle_id = bundle_id_output.last.strip
    end

    if bundle_id.empty?
      UI.user_error!("[AppSealing] Failed to retrieve Bundle ID from Xcode project.")
    end

    UI.message "[AppSealing] Bundle ID: #{bundle_id}"

    # JWT 토큰 생성 함수
    def generate_jwt_token
      private_key = OpenSSL::PKey::EC.new(File.read(PRIVATE_KEY_PATH))
      payload = {
        iss: ISSUER_ID,
        exp: Time.now.to_i + 20 * 60, # 20분 유효기간
        aud: "appstoreconnect-v1"
      }
      header = { kid: KEY_ID }
      JWT.encode(payload, private_key, 'ES256', header)
    end

    # 최신 빌드 번호 가져오기 함수
    def fetch_latest_build_number(jwt_token, bundle_id)
      uri = URI("https://api.appstoreconnect.apple.com/v1/builds?filter[app]=#{bundle_id}&sort=-version")
      request = Net::HTTP::Get.new(uri)
      request['Authorization'] = "Bearer #{jwt_token}"

      response = Net::HTTP.start(uri.hostname, uri.port, use_ssl: true) do |http|
        http.request(request)
      end

      if response.code.to_i == 200
        builds = JSON.parse(response.body)['data']
        if builds && !builds.empty?
          latest_build_number = builds.first['attributes']['version'].to_i
          return latest_build_number
        end
      else
        UI.error("Failed to fetch builds: #{response.code} - #{response.body}")
      end

      nil # 빌드를 찾지 못한 경우 nil 반환
    end

    # JWT 토큰 생성 및 최신 빌드 번호 가져오기
    jwt_token = generate_jwt_token()
    latest_build_number = fetch_latest_build_number(jwt_token, bundle_id)

    if latest_build_number.nil?
      UI.message("[AppSealing] No builds found. Starting with build number 1.")
      new_build_number = 1
    else
      new_build_number = latest_build_number + 1
      UI.message("[AppSealing] Latest Build Number: #{latest_build_number}")
      UI.message("[AppSealing] New Build Number: #{new_build_number}")
    end

    # 새로운 빌드 번호 설정 (Xcode 프로젝트에 적용)
    increment_build_number(
      build_number: new_build_number,
      xcodeproj: xcode_file_path # Xcode 프로젝트 경로 명시
    )

    # 이후 기존 Fastfile의 빌드 및 업로드 로직 유지...
  end
end
